#include <stdio.h>
#include <stdlib.h>
#include "pointer_test.h"

void print_position(struct coordinate *coord)
{
    printf("(%d, %d)\n", coord->x, coord->y);
    // coord->x = 7;
    // coord->y = 9;
}

int my_strlen(char *s)
{
    int i = 0;
    while (s[i] != '\0') i++;
    
    return i;
}

void my_strcpy(char *target, char *source)
{
    int i = 0;
    while ((target[i] = source[i]) != '\0') i++;
    // printf("exiting...\n");
}

void reverse_strcpy(char *target, char *source)
{
    int i = 0;
    int j = my_strlen(source) - 1;
    
    while (j >= 0) {
        target[i] = source[j];
        ++i;
        --j;
    }
    // or ...
    // while ((target[i++] = source[j--]) != '\0' && j >= 0);
    
    target[i] = '\0';
}

/* Struct pointer test */
void struct_test(void)
{
    struct coordinate coord;
    coord.x = 3;
    coord.y = 4;
    print_position(&coord);

    struct coordinate *pcoord = &coord;
    coord.y = 10;
    print_position(pcoord);
    pcoord->y = 11;
    print_position(&coord);
    print_position(pcoord);

    printf("what?\n");
}

void strcpy_test(void)
{
    // char source[] = "source string to copy into targ[]";
    // char targ[sizeof(source)];
    char *source = "source string to copy into *targ";
    char *targ = malloc(sizeof(source));
    my_strcpy(targ, source);
    printf("~~~~~~~~~~ strcpy_test ~~~~~~~~~~\n\n");
    printf("source: %s\n", source);
    printf("targ: %s\n", targ);
    printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
}

void reverse_strcpy_test(void)
{
    char *source = "another thing";
    char *targ = malloc(sizeof(source));
    printf("\nsizeof(source) = %lu (because sizeof(char *) = 8 ssshhh)\n\n", sizeof(source));
    reverse_strcpy(targ, source);
    printf("~~~~~~~~~~ reverse_strcpy_test ~~~~~~~~~~\n\n");
    printf("*source: %s\n", source);
    printf("*targ: %s\n", targ);
    printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
}

/*
 * atoi function that prints values at each step.
 */
int my_atoi(char s[])
{
    int i, n;
    
    n = 0;
    for (i = 0; s[i] >='0' && s[i] <= '9'; ++i) {
        int p1 = 10 * n;
        printf("10 * n = %d\n", p1);
        int p2 = s[i] - '0';
        printf("s[i] = %d\n", s[i]);
        printf("'0' = %d\n", '0');
        printf("s[i] - '0' = %d\n", p2);
        n = p1 + p2;
    }
    
    return n;
}

void atoi_test(void)
{
    printf("atoi(\"73\") = %d\n", my_atoi("73"));
}

/* strindex: return index of t in s, -1 if none */
int strindex(char s[], char t[])
{
    int i, j, k;
    
    for (i = 0; s[i] != '\0'; i++) {
        for (j = 0, k = 0; t[k] != '\0' && s[j] == t[k]; j++, k++) ; // increment characters
        if (k > 0 && t[k] == '\0') {
            return i;
        }
    }
    
    return -1;
}

void strindex_test(void)
{
    char haiku[] = "\tI have fist\n\tokay I have fist\n\tbend over";
    char substr[] = "have";
    
    printf("\n~~~~~~~~~~ strindex_test() ~~~~~~~~~~\n");
    printf("Text to search:\n%s\n", haiku);
    printf("Search string: '%s'\n", substr);
    printf("Result: %d\n", strindex(haiku, substr));
    printf("\n~~~~~~~~~~ end strindex_text() ~~~~~~~~~~\n\n");
}

#include <stdio.h>

void print(char *s)
{
    if (*s != 0) {
        putchar(*s);
        print(s+1);
    }
}

void print_reverse(char *s)
{
    if (*s != 0) {
        print_reverse(s+1);
        putchar(*s);
    }
}

int main(void)
{
    struct_test();
    strcpy_test();
    reverse_strcpy_test();
    atoi_test();
    strindex_test();

    char *s = "HALLO WORALDO!";
    print(s);
    putchar('\n');
    print_reverse(s);
    putchar('\n');
}
